plugins {
    id 'org.springframework.boot' version '2.6.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.github.node-gradle.node" version "3.2.1"
}

node {
    version = '14.15.4'
    npmVersion = '8.5.0'
    yarnVersion = '1.22.17'
    distBaseUrl = "https://nodejs.org/dist"
    workDir = file("${project.projectDir}/src/frontend/face_album")
    npmWorkDir = file("${project.projectDir}/src/frontend/face_album")
    nodeProjectDir = file("${project.projectDir}/src/frontend/face_album")
    npmInstallCommand = "install"
}

group = 'com.kkanggogo'
version = new Date().format("yyyyMMddHHmmss") + '-0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // https://mvnrepository.com/artifact/org.mariadb.jdbc/mariadb-java-client
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.3'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-aws', version: '2.2.6.RELEASE'
    implementation 'org.projectlombok:lombok:1.18.16'
    implementation 'org.projectlombok:lombok:1.18.16'
    compileOnly 'org.projectlombok:lombok'
//    runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'


    // mysql, jpa
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.4.2'
    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.0.3'
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.3'

    // jwt, security
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.5.3'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.6.3'
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.10.2'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.2'

    // valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // json
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

test {
    useJUnitPlatform {
        includeTags 'unit'
        excludeTags 'integration'
    }
}

task integrationTest(type: Test, group: 'verification') {
    useJUnitPlatform {
        includeTags 'integration'
        excludeTags 'unit'
    }
}

task wholeTest(type: Test, group: 'verification') {
    useJUnitPlatform()
}

task deleteReactArtifact(type: Delete) {
    description 'Delete previous React artifact'
    delete 'src/main/resource/static'
}

task npm_install(type: NpmTask) {
    description = "npm install"
    workingDir = file("${project.projectDir}/frontend/face_album")
    dependsOn('deleteReactArtifact')
    args = ['install']
}


task buildFrontend(type: NpmTask) {
    description = "npm run build"
    workingDir = file("${project.projectDir}/frontend/face_album")
    dependsOn("npm_install")
    args = ["run", "build"]
}

processResources.dependsOn 'buildFrontend'
